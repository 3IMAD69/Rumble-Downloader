"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/css-what";
exports.ids = ["vendor-chunks/css-what"];
exports.modules = {

/***/ "(action-browser)/./node_modules/css-what/lib/es/index.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTraversal: () => (/* reexport safe */ _parse__WEBPACK_IMPORTED_MODULE_1__.isTraversal),\n/* harmony export */   parse: () => (/* reexport safe */ _parse__WEBPACK_IMPORTED_MODULE_1__.parse),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify__WEBPACK_IMPORTED_MODULE_2__.stringify)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/css-what/lib/es/types.js\");\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(const __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"isTraversal\",\"parse\",\"stringify\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = () => _types__WEBPACK_IMPORTED_MODULE_0__[__WEBPACK_IMPORT_KEY__]\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse */ \"(action-browser)/./node_modules/css-what/lib/es/parse.js\");\n/* harmony import */ var _stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stringify */ \"(action-browser)/./node_modules/css-what/lib/es/stringify.js\");\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXdCO0FBQ3FCO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXctcnVtYmxlLWRvd25sb2FkZXIvLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2VzL2luZGV4LmpzP2E3NzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vdHlwZXNcIjtcbmV4cG9ydCB7IGlzVHJhdmVyc2FsLCBwYXJzZSB9IGZyb20gXCIuL3BhcnNlXCI7XG5leHBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwiLi9zdHJpbmdpZnlcIjtcbiJdLCJuYW1lcyI6WyJpc1RyYXZlcnNhbCIsInBhcnNlIiwic3RyaW5naWZ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/css-what/lib/es/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/css-what/lib/es/parse.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/parse.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTraversal: () => (/* binding */ isTraversal),\n/* harmony export */   parse: () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/css-what/lib/es/types.js\");\n\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [\n        126 /* Tilde */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element\n    ],\n    [\n        94 /* Circumflex */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start\n    ],\n    [\n        36 /* Dollar */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End\n    ],\n    [\n        42 /* Asterisk */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any\n    ],\n    [\n        33 /* ExclamationMark */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not\n    ],\n    [\n        124 /* Pipe */ ,\n        _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Hyphen\n    ]\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\"\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */ function isTraversal(selector) {\n    switch(selector.type){\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling:\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\n    \"contains\",\n    \"icontains\"\n]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace ? escaped : high < 0 ? String.fromCharCode(high + 0x10000) : String.fromCharCode(high >> 10 | 0xd800, high & 0x3ff | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */  || c === 34 /* DoubleQuote */ ;\n}\nfunction isWhitespace(c) {\n    return c === 32 /* Space */  || c === 9 /* Tab */  || c === 10 /* NewLine */  || c === 12 /* FormFeed */  || c === 13 /* CarriageReturn */ ;\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */ function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while(selectorIndex < selector.length && isWhitespace(selector.charCodeAt(selectorIndex))){\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for(; counter > 0 && selectorIndex < selector.length; selectorIndex++){\n            if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  && !isEscaped(selectorIndex)) {\n                counter++;\n            } else if (selector.charCodeAt(selectorIndex) === 41 /* RightParenthesis */  && !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while(selector.charCodeAt(--pos) === 92 /* BackSlash */ )slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 && tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({\n            type\n        });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\"\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */ function finalizeSubselector() {\n        if (tokens.length && tokens[tokens.length - 1].type === _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while(selectorIndex < selector.length){\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch(firstChar){\n            // Whitespace\n            case 32 /* Space */ :\n            case 9 /* Tab */ :\n            case 10 /* NewLine */ :\n            case 12 /* FormFeed */ :\n            case 13 /* CarriageReturn */ :\n                {\n                    if (tokens.length === 0 || tokens[0].type !== _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant) {\n                        ensureNotTraversal();\n                        tokens.push({\n                            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant\n                        });\n                    }\n                    stripWhitespace(1);\n                    break;\n                }\n            // Traversals\n            case 62 /* GreaterThan */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 60 /* LessThan */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 126 /* Tilde */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling);\n                    stripWhitespace(1);\n                    break;\n                }\n            case 43 /* Plus */ :\n                {\n                    addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent);\n                    stripWhitespace(1);\n                    break;\n                }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */ :\n                {\n                    addSpecialAttribute(\"class\", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element);\n                    break;\n                }\n            case 35 /* Hash */ :\n                {\n                    addSpecialAttribute(\"id\", _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals);\n                    break;\n                }\n            case 91 /* LeftSquareBracket */ :\n                {\n                    stripWhitespace(1);\n                    // Determine attribute name and namespace\n                    let name;\n                    let namespace = null;\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ ) {\n                        // Equivalent to no namespace\n                        name = getName(1);\n                    } else if (selector.startsWith(\"*|\", selectorIndex)) {\n                        namespace = \"*\";\n                        name = getName(2);\n                    } else {\n                        name = getName(0);\n                        if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            namespace = name;\n                            name = getName(1);\n                        }\n                    }\n                    stripWhitespace(0);\n                    // Determine comparison operation\n                    let action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists;\n                    const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                    if (possibleAction) {\n                        action = possibleAction;\n                        if (selector.charCodeAt(selectorIndex + 1) !== 61 /* Equal */ ) {\n                            throw new Error(\"Expected `=`\");\n                        }\n                        stripWhitespace(2);\n                    } else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */ ) {\n                        action = _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals;\n                        stripWhitespace(1);\n                    }\n                    // Determine value\n                    let value = \"\";\n                    let ignoreCase = null;\n                    if (action !== \"exists\") {\n                        if (isQuote(selector.charCodeAt(selectorIndex))) {\n                            const quote = selector.charCodeAt(selectorIndex);\n                            let sectionEnd = selectorIndex + 1;\n                            while(sectionEnd < selector.length && (selector.charCodeAt(sectionEnd) !== quote || isEscaped(sectionEnd))){\n                                sectionEnd += 1;\n                            }\n                            if (selector.charCodeAt(sectionEnd) !== quote) {\n                                throw new Error(\"Attribute value didn't end\");\n                            }\n                            value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                            selectorIndex = sectionEnd + 1;\n                        } else {\n                            const valueStart = selectorIndex;\n                            while(selectorIndex < selector.length && (!isWhitespace(selector.charCodeAt(selectorIndex)) && selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */  || isEscaped(selectorIndex))){\n                                selectorIndex += 1;\n                            }\n                            value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                        }\n                        stripWhitespace(0);\n                        // See if we have a force ignore flag\n                        const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                        // If the forceIgnore flag is set (either `i` or `s`), use that value\n                        if (forceIgnore === 115 /* LowerS */ ) {\n                            ignoreCase = false;\n                            stripWhitespace(1);\n                        } else if (forceIgnore === 105 /* LowerI */ ) {\n                            ignoreCase = true;\n                            stripWhitespace(1);\n                        }\n                    }\n                    if (selector.charCodeAt(selectorIndex) !== 93 /* RightSquareBracket */ ) {\n                        throw new Error(\"Attribute selector didn't terminate\");\n                    }\n                    selectorIndex += 1;\n                    const attributeSelector = {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute,\n                        name,\n                        action,\n                        value,\n                        namespace,\n                        ignoreCase\n                    };\n                    tokens.push(attributeSelector);\n                    break;\n                }\n            case 58 /* Colon */ :\n                {\n                    if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */ ) {\n                        tokens.push({\n                            type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.PseudoElement,\n                            name: getName(2).toLowerCase(),\n                            data: selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */  ? readValueWithParenthesis() : null\n                        });\n                        continue;\n                    }\n                    const name = getName(1).toLowerCase();\n                    let data = null;\n                    if (selector.charCodeAt(selectorIndex) === 40 /* LeftParenthesis */ ) {\n                        if (unpackPseudos.has(name)) {\n                            if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                                throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                            }\n                            data = [];\n                            selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                            if (selector.charCodeAt(selectorIndex) !== 41 /* RightParenthesis */ ) {\n                                throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                            }\n                            selectorIndex += 1;\n                        } else {\n                            data = readValueWithParenthesis();\n                            if (stripQuotesFromPseudos.has(name)) {\n                                const quot = data.charCodeAt(0);\n                                if (quot === data.charCodeAt(data.length - 1) && isQuote(quot)) {\n                                    data = data.slice(1, -1);\n                                }\n                            }\n                            data = unescapeCSS(data);\n                        }\n                    }\n                    tokens.push({\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo,\n                        name,\n                        data\n                    });\n                    break;\n                }\n            case 44 /* Comma */ :\n                {\n                    finalizeSubselector();\n                    tokens = [];\n                    stripWhitespace(1);\n                    break;\n                }\n            default:\n                {\n                    if (selector.startsWith(\"/*\", selectorIndex)) {\n                        const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                        if (endIndex < 0) {\n                            throw new Error(\"Comment was not terminated\");\n                        }\n                        selectorIndex = endIndex + 2;\n                        // Remove leading whitespace\n                        if (tokens.length === 0) {\n                            stripWhitespace(0);\n                        }\n                        break;\n                    }\n                    let namespace = null;\n                    let name;\n                    if (firstChar === 42 /* Asterisk */ ) {\n                        selectorIndex += 1;\n                        name = \"*\";\n                    } else if (firstChar === 124 /* Pipe */ ) {\n                        name = \"\";\n                        if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */ ) {\n                            addTraversal(_types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator);\n                            stripWhitespace(2);\n                            break;\n                        }\n                    } else if (reName.test(selector.slice(selectorIndex))) {\n                        name = getName(0);\n                    } else {\n                        break loop;\n                    }\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */  && selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */ ) {\n                        namespace = name;\n                        if (selector.charCodeAt(selectorIndex + 1) === 42 /* Asterisk */ ) {\n                            name = \"*\";\n                            selectorIndex += 2;\n                        } else {\n                            name = getName(1);\n                        }\n                    }\n                    tokens.push(name === \"*\" ? {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal,\n                        namespace\n                    } : {\n                        type: _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag,\n                        name,\n                        namespace\n                    });\n                }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/css-what/lib/es/parse.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/css-what/lib/es/stringify.js":
/*!***************************************************!*\
  !*** ./node_modules/css-what/lib/es/stringify.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   stringify: () => (/* binding */ stringify)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(action-browser)/./node_modules/css-what/lib/es/types.js\");\n\nconst attribValChars = [\n    \"\\\\\",\n    '\"'\n];\nconst pseudoValChars = [\n    ...attribValChars,\n    \"(\",\n    \")\"\n];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map((c)=>c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map((c)=>c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([\n    ...pseudoValChars,\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\"\n].map((c)=>c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */ function stringify(selector) {\n    return selector.map((token)=>token.map(stringifyToken).join(\"\")).join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n    switch(token.type){\n        // Simple types\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Descendant:\n            return \" \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : `${getNamespace(token.namespace)}*`;\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Tag:\n            return getNamespacedName(token);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.PseudoElement:\n            return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Pseudo:\n            return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data)})`}`;\n        case _types__WEBPACK_IMPORTED_MODULE_0__.SelectorType.Attribute:\n            {\n                if (token.name === \"id\" && token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return `#${escapeName(token.value, charsToEscapeInName)}`;\n                }\n                if (token.name === \"class\" && token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n                    return `.${escapeName(token.value, charsToEscapeInName)}`;\n                }\n                const name = getNamespacedName(token);\n                if (token.action === _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists) {\n                    return `[${name}]`;\n                }\n                return `[${name}${getActionValue(token.action)}=\"${escapeName(token.value, charsToEscapeInAttributeValue)}\"${token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\"}]`;\n            }\n    }\n}\nfunction getActionValue(action) {\n    switch(action){\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Equals:\n            return \"\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Element:\n            return \"~\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Start:\n            return \"^\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.End:\n            return \"$\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Any:\n            return \"*\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Not:\n            return \"!\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Hyphen:\n            return \"|\";\n        case _types__WEBPACK_IMPORTED_MODULE_0__.AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;\n}\nfunction getNamespace(namespace) {\n    return namespace !== null ? `${namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName)}|` : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    let lastIdx = 0;\n    let ret = \"\";\n    for(let i = 0; i < str.length; i++){\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += `${str.slice(lastIdx, i)}\\\\${str.charAt(i)}`;\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/css-what/lib/es/stringify.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/css-what/lib/es/types.js":
/*!***********************************************!*\
  !*** ./node_modules/css-what/lib/es/types.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AttributeAction: () => (/* binding */ AttributeAction),\n/* harmony export */   IgnoreCaseMode: () => (/* binding */ IgnoreCaseMode),\n/* harmony export */   SelectorType: () => (/* binding */ SelectorType)\n/* harmony export */ });\nvar SelectorType;\n(function(SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType || (SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */ const IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false\n};\nvar AttributeAction;\n(function(AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction || (AttributeAction = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQU8sSUFBSUEsYUFBYTtBQUN2QixVQUFVQSxZQUFZO0lBQ25CQSxZQUFZLENBQUMsWUFBWSxHQUFHO0lBQzVCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsZ0JBQWdCLEdBQUc7SUFDaENBLFlBQVksQ0FBQyxNQUFNLEdBQUc7SUFDdEJBLFlBQVksQ0FBQyxZQUFZLEdBQUc7SUFDNUIsYUFBYTtJQUNiQSxZQUFZLENBQUMsV0FBVyxHQUFHO0lBQzNCQSxZQUFZLENBQUMsUUFBUSxHQUFHO0lBQ3hCQSxZQUFZLENBQUMsYUFBYSxHQUFHO0lBQzdCQSxZQUFZLENBQUMsU0FBUyxHQUFHO0lBQ3pCQSxZQUFZLENBQUMsVUFBVSxHQUFHO0lBQzFCQSxZQUFZLENBQUMsbUJBQW1CLEdBQUc7QUFDdkMsR0FBR0EsZ0JBQWlCQSxDQUFBQSxlQUFlLENBQUM7QUFDcEM7Ozs7OztDQU1DLEdBQ00sTUFBTUMsaUJBQWlCO0lBQzFCQyxTQUFTO0lBQ1RDLFlBQVk7SUFDWkMsWUFBWTtJQUNaQyxlQUFlO0FBQ25CLEVBQUU7QUFDSyxJQUFJQyxnQkFBZ0I7QUFDMUIsVUFBVUEsZUFBZTtJQUN0QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFVBQVUsR0FBRztJQUM3QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLFNBQVMsR0FBRztJQUM1QkEsZUFBZSxDQUFDLE1BQU0sR0FBRztJQUN6QkEsZUFBZSxDQUFDLFFBQVEsR0FBRztBQUMvQixHQUFHQSxtQkFBb0JBLENBQUFBLGtCQUFrQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV3LXJ1bWJsZS1kb3dubG9hZGVyLy4vbm9kZV9tb2R1bGVzL2Nzcy13aGF0L2xpYi9lcy90eXBlcy5qcz8yYWZkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB2YXIgU2VsZWN0b3JUeXBlO1xuKGZ1bmN0aW9uIChTZWxlY3RvclR5cGUpIHtcbiAgICBTZWxlY3RvclR5cGVbXCJBdHRyaWJ1dGVcIl0gPSBcImF0dHJpYnV0ZVwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBzZXVkb1wiXSA9IFwicHNldWRvXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUHNldWRvRWxlbWVudFwiXSA9IFwicHNldWRvLWVsZW1lbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlVuaXZlcnNhbFwiXSA9IFwidW5pdmVyc2FsXCI7XG4gICAgLy8gVHJhdmVyc2Fsc1xuICAgIFNlbGVjdG9yVHlwZVtcIkFkamFjZW50XCJdID0gXCJhZGphY2VudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkNoaWxkXCJdID0gXCJjaGlsZFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkRlc2NlbmRhbnRcIl0gPSBcImRlc2NlbmRhbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQYXJlbnRcIl0gPSBcInBhcmVudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlNpYmxpbmdcIl0gPSBcInNpYmxpbmdcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDb2x1bW5Db21iaW5hdG9yXCJdID0gXCJjb2x1bW4tY29tYmluYXRvclwiO1xufSkoU2VsZWN0b3JUeXBlIHx8IChTZWxlY3RvclR5cGUgPSB7fSkpO1xuLyoqXG4gKiBNb2RlcyBmb3IgaWdub3JlIGNhc2UuXG4gKlxuICogVGhpcyBjb3VsZCBiZSB1cGRhdGVkIHRvIGFuIGVudW0sIGFuZCB0aGUgb2JqZWN0IGlzXG4gKiB0aGUgY3VycmVudCBzdGFuZC1pbiB0aGF0IHdpbGwgYWxsb3cgY29kZSB0byBiZSB1cGRhdGVkXG4gKiB3aXRob3V0IGJpZyBjaGFuZ2VzLlxuICovXG5leHBvcnQgY29uc3QgSWdub3JlQ2FzZU1vZGUgPSB7XG4gICAgVW5rbm93bjogbnVsbCxcbiAgICBRdWlya3NNb2RlOiBcInF1aXJrc1wiLFxuICAgIElnbm9yZUNhc2U6IHRydWUsXG4gICAgQ2FzZVNlbnNpdGl2ZTogZmFsc2UsXG59O1xuZXhwb3J0IHZhciBBdHRyaWJ1dGVBY3Rpb247XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZUFjdGlvbikge1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkFueVwiXSA9IFwiYW55XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRWxlbWVudFwiXSA9IFwiZWxlbWVudFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkVuZFwiXSA9IFwiZW5kXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRXF1YWxzXCJdID0gXCJlcXVhbHNcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFeGlzdHNcIl0gPSBcImV4aXN0c1wiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkh5cGhlblwiXSA9IFwiaHlwaGVuXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiTm90XCJdID0gXCJub3RcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJTdGFydFwiXSA9IFwic3RhcnRcIjtcbn0pKEF0dHJpYnV0ZUFjdGlvbiB8fCAoQXR0cmlidXRlQWN0aW9uID0ge30pKTtcbiJdLCJuYW1lcyI6WyJTZWxlY3RvclR5cGUiLCJJZ25vcmVDYXNlTW9kZSIsIlVua25vd24iLCJRdWlya3NNb2RlIiwiSWdub3JlQ2FzZSIsIkNhc2VTZW5zaXRpdmUiLCJBdHRyaWJ1dGVBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/css-what/lib/es/types.js\n");

/***/ })

};
;